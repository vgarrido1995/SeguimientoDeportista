# -*- coding: utf-8 -*-
"""RPE X minutos (OPTIMIZADO)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aPYFUlrJk7cKEYe0rxICfpZfI9TeEOWu
"""

import matplotlib.pyplot as plt
import numpy as np
from typing import List, Dict

def get_user_input(prompt: str, options: List[str]) -> str:
    while True:
        print(prompt)
        for i, option in enumerate(options, 1):
            print(f"{i}. {option}")
        choice = input(f"Seleccione el número de la opción (1-{len(options)}): ")
        if choice.isdigit() and 1 <= int(choice) <= len(options):
            return options[int(choice) - 1]
        print(f"Por favor, ingrese un valor válido (1-{len(options)}).")

def ingresar_sesion(dia: str) -> Dict[str, any]:
    print(f"\nIngresando sesión para {dia}:")
    tipo_sesion = get_user_input("Tipo de sesión:", ["Físico", "Boxeo"])

    if tipo_sesion == "Físico":
        subcategoria = get_user_input("Subcategoría de Físico:", ["Aeróbico", "Fuerza", "Híbrida"])
        if subcategoria == "Aeróbico":
            medio = get_user_input("Medio para Aeróbico:", ["Correr", "Pedalear", "Nadar"])
            subcategoria = f"Aeróbico ({medio})"
    else:
        subcategoria = get_user_input("Subcategoría de Boxeo:", ["HIIT", "Técnico Suave", "Técnico Moderado", "Sparring"])

    rpe = int(input("\nPercepción de esfuerzo (RPE, escala 1-10): "))
    minutos = int(input("Duración de la sesión (minutos): "))
    carga = rpe * minutos

    return {
        "Día": dia,
        "Tipo de Sesión": tipo_sesion,
        "Subcategoría": subcategoria,
        "RPE": rpe,
        "Minutos": minutos,
        "Carga": carga
    }

def generar_graficos(sesiones: List[Dict[str, any]]) -> None:
    dias = [s['Día'] for s in sesiones]
    carga_boxeo = [s['Carga'] if s['Tipo de Sesión'] == 'Boxeo' else 0 for s in sesiones]
    carga_fisico = [s['Carga'] if s['Tipo de Sesión'] == 'Físico' else 0 for s in sesiones]

    # Gráfico de barras
    fig, ax = plt.subplots(figsize=(10, 6))
    bar_width = 0.4
    index = np.arange(len(dias))
    ax.bar(index, carga_boxeo, bar_width, label='Boxeo', color='salmon')
    ax.bar(index + bar_width, carga_fisico, bar_width, label='Físico', color='lightblue')

    ax.set_xlabel('Día de la Semana', fontsize=12)
    ax.set_ylabel('Carga de Entrenamiento (RPE x Minutos)', fontsize=12)
    ax.set_title('Distribución Semanal de Entrenamiento: Sesiones de Boxeo y PF', fontsize=16)
    ax.set_xticks(index + bar_width / 2)
    ax.set_xticklabels(dias)
    ax.legend()
    plt.tight_layout()
    plt.show()

    # Gráfico circular
    total_boxeo = sum(s["Minutos"] for s in sesiones if s["Tipo de Sesión"] == "Boxeo")
    total_fisico = sum(s["Minutos"] for s in sesiones if s["Tipo de Sesión"] == "Físico")
    total_tiempo = total_boxeo + total_fisico

    if total_tiempo > 0:
        labels = [f'Boxeo ({total_boxeo} min)', f'Físico ({total_fisico} min)']
        sizes = [total_boxeo, total_fisico]
        colors = ['salmon', 'lightblue']
        explode = (0.1, 0)
        fig1, ax1 = plt.subplots(figsize=(7, 7))
        ax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)
        ax1.set_title('Distribución Porcentual del Tiempo de Entrenamiento: Boxeo vs Físico', fontsize=16, pad=20)
        plt.show()

def main() -> None:
    dias_semana = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
    sesiones = [ingresar_sesion(dia) for dia in dias_semana]

    print("\nResumen Semanal de Entrenamiento:")
    for sesion in sesiones:
        print(f"Día: {sesion['Día']} | Tipo de Sesión: {sesion['Tipo de Sesión']} | "
              f"Subcategoría: {sesion['Subcategoría']} | RPE: {sesion['RPE']} | "
              f"Minutos: {sesion['Minutos']} | Carga: {sesion['Carga']}")

    generar_graficos(sesiones)

if __name__ == "__main__":
    main()