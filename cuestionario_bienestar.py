# -*- coding: utf-8 -*-
"""Cuestionario Bienestar

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oq5qaXs0c0KIac0VnUb5L186I0y_rsZp
"""

# Importamos las bibliotecas necesarias
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from typing import List, Dict

# Función para registrar el bienestar diario
def registrar_bienestar(dia: str) -> Dict[str, any]:
    print(f"\nRegistrando bienestar para {dia}:")

    # Pedimos los puntajes para cada categoría (1-7)
    sueno = int(input("Califique su sueño (1 = Muy, muy bueno, 7 = Muy, muy malo): "))
    estres = int(input("Califique su nivel de estrés (1 = Muy, muy bajo, 7 = Muy, muy alto): "))
    fatiga = int(input("Califique su fatiga (1 = Muy, muy baja, 7 = Muy, muy alta): "))
    dolor_muscular = int(input("Califique su dolor muscular (1 = Muy, muy bajo, 7 = Muy, muy alto): "))

    # Calculamos un valor promedio de bienestar general
    bienestar_general = (sueno + estres + fatiga + dolor_muscular) / 4

    # Retornamos el registro con todos los datos
    return {
        "Día": dia,
        "Sueño": sueno,
        "Estrés": estres,
        "Fatiga": fatiga,
        "Dolor Muscular": dolor_muscular,
        "Bienestar General": bienestar_general
    }

# Función para generar los gráficos de bienestar
def generar_graficos_bienestar(registros: List[Dict[str, any]]) -> None:
    dias = [r['Día'] for r in registros]
    sueno = [r['Sueño'] for r in registros]
    estres = [r['Estrés'] for r in registros]
    fatiga = [r['Fatiga'] for r in registros]
    dolor_muscular = [r['Dolor Muscular'] for r in registros]

    # Gráfico de barras para cada categoría
    fig, ax = plt.subplots(figsize=(10, 6))
    bar_width = 0.2
    index = np.arange(len(dias))

    ax.bar(index, sueno, bar_width, label='Sueño', color='blue')
    ax.bar(index + bar_width, estres, bar_width, label='Estrés', color='red')
    ax.bar(index + bar_width * 2, fatiga, bar_width, label='Fatiga', color='green')
    ax.bar(index + bar_width * 3, dolor_muscular, bar_width, label='Dolor Muscular', color='purple')

    ax.set_xlabel('Día de la Semana', fontsize=12)
    ax.set_ylabel('Puntuación (1-7)', fontsize=12)
    ax.set_title('Registro de Bienestar Diario', fontsize=16)
    ax.set_xticks(index + bar_width * 1.5)
    ax.set_xticklabels(dias)
    ax.legend()

    plt.tight_layout()
    plt.show()

    # Gráfico de líneas (Tendencias)
    plt.figure(figsize=(10, 6))
    plt.plot(dias, sueno, label='Sueño', marker='o', color='blue')
    plt.plot(dias, estres, label='Estrés', marker='o', color='red')
    plt.plot(dias, fatiga, label='Fatiga', marker='o', color='green')
    plt.plot(dias, dolor_muscular, label='Dolor Muscular', marker='o', color='purple')

    plt.xlabel('Día de la Semana', fontsize=12)
    plt.ylabel('Puntuación (1-7)', fontsize=12)
    plt.title('Tendencias de Bienestar Diario', fontsize=16)
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Gráfico de área apilada
    plt.figure(figsize=(10, 6))
    plt.stackplot(dias, sueno, estres, fatiga, dolor_muscular, labels=['Sueño', 'Estrés', 'Fatiga', 'Dolor Muscular'], colors=['blue', 'red', 'green', 'purple'])

    plt.xlabel('Día de la Semana', fontsize=12)
    plt.ylabel('Puntuación Acumulada', fontsize=12)
    plt.title('Bienestar Diario Apilado', fontsize=16)
    plt.legend(loc='upper left')
    plt.tight_layout()
    plt.show()

    # Mapa de calor (Heatmap)
    data = np.array([[r['Sueño'], r['Estrés'], r['Fatiga'], r['Dolor Muscular']] for r in registros])

    plt.figure(figsize=(8, 6))
    sns.heatmap(data, annot=True, cmap='coolwarm', xticklabels=['Sueño', 'Estrés', 'Fatiga', 'Dolor Muscular'], yticklabels=dias, cbar=True)
    plt.title('Mapa de Calor de Bienestar Diario', fontsize=16)
    plt.tight_layout()
    plt.show()

# Función principal para ejecutar todo el programa
def main() -> None:
    dias_semana = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"]
    registros_bienestar = [registrar_bienestar(dia) for dia in dias_semana]

    print("\nResumen Semanal de Bienestar:")
    for registro in registros_bienestar:
        print(f"Día: {registro['Día']} | Sueño: {registro['Sueño']} | Estrés: {registro['Estrés']} | "
              f"Fatiga: {registro['Fatiga']} | Dolor Muscular: {registro['Dolor Muscular']} | "
              f"Bienestar General: {registro['Bienestar General']:.1f}")

    generar_graficos_bienestar(registros_bienestar)

# Ejecutar la función principal
if __name__ == "__main__":
    main()